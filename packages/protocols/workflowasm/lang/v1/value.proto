syntax = "proto3";

package workflowasm.lang.v1;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

// Short integral codes for the WorkflowASM value types.
//
// NB: These must match exactly with the
// `oneof` field numbers in the `workflowasm.lang.v1.Value` message
// type.
enum Type {
  TYPE_UNKNOWN = 0;
  TYPE_UNDEFINED = 1;
  TYPE_NULL = 2;
  TYPE_BOOL = 3;
  TYPE_INT64 = 4;
  TYPE_UINT64 = 5;
  TYPE_DOUBLE = 6;
  TYPE_STRING = 7;
  TYPE_BYTES = 8;
  TYPE_ENUM = 9;
  TYPE_MESSAGE = 10;
  TYPE_MAP = 11;
  TYPE_LIST = 12;
  TYPE_TYPE = 13;
  TYPE_CALLABLE = 14;
}

// A fully resolved value
message Value {
  oneof kind {
    google.protobuf.NullValue undefined_value = 1;
    google.protobuf.NullValue null_value = 2;
    bool bool_value = 3;
    int64 int64_value = 4;
    uint64 uint64_value = 5;
    double double_value = 6;
    string string_value = 7;
    bytes bytes_value = 8;
    EnumValue enum_value = 9; 
    // The proto message backing an object value.
    google.protobuf.Any message_value = 10;
    MapValue map_value = 11;
    ListValue list_value = 12;
    string type_value = 13;
    CallableValue callable_value = 14;
  }
}

// An enum value.
message EnumValue {
  // The fully qualified name of the enum protobuf type.
  string type = 1;

  // The value of the enum.
  int32 value = 2;
}

// A list.
//
// Wrapped in a message so 'not set' and empty can be differentiated, which is
// required for use in a 'oneof'.
message ListValue {
  // The ordered values in the list.
  repeated Value values = 1;
}

// A map.
//
// Wrapped in a message so 'not set' and empty can be differentiated, which is
// required for use in a 'oneof'.
message MapValue {
  message Entry {
    // The key.
    //
    // Must be unique within the map.
    // Currently only boolean, int, uint, and string values can be keys.
    Value key = 1;

    // The value.
    Value value = 2;
  }

  // The set of map entries.
  //
  // CEL has fewer restrictions on keys, so a protobuf map representation
  // cannot be used.
  repeated Entry entries = 1;
}

// A closure over a function.
message CallableValue {
  // Package where the function resides
  string package = 1;

  // A string identifying the code for the function that was closed over
  string id = 2;

  // A string naming the semantic version of the target function
  string semver = 3;

  // Serializable description of a function closure
  message Closure {
    // Initial segment of bound arguments
    repeated Value bound_args = 1;
    // Scoped clsure entries
    MapValue captures = 2;
  }

  // State of the callable's closure, if any
  Closure closure = 4;
}
