syntax = "proto3";

package workflowasm.lang.v1;

// Opcodes for WorkflowASM instructions.
enum Opcode {
  // No-op instruction. Execution proceeds without any effect.
  OP_NOOP = 0;

  // Push `null` or `undefined` to the stack. If `i1==0`, push `null`,
  // else push `undefined`
  //
  // Stack signature: `[1]`
  OP_PUSHNULL = 1;

  // Push a boolean value to the stack. If `i1==0`, push `false`. If
  // `i1==1`, push `true`.
  //
  // Stack signature: `[1]`
  OP_PUSHBOOL = 2;

  // Push the constant integer value given by `i1` to the stack.
  //
  // `i1`: The literal constant to push.
  //
  // Stack signature: `[1]`
  OP_PUSHINT = 3;

  // Push the depth of the stack (as an int64) to the stack. (Note that
  // the result left by this opcode is not counted in the stack depth.)
  //
  // Stack signature: `[1]`
  OP_PUSHDEPTH = 4;

  // Push a value from the function's constant table to the top of the
  // value stack.
  //
  // `i1`: Index into the constant table of the constant to push.
  //
  // Stack signature: `[1]`
  //
  // Throws:
  // * `google.rpc.Code.OUT_OF_RANGE` if no such index exists in
  // the constant table.
  OP_PUSHK = 5;

  // Duplicate the value at `stack(-i1)` and push it. For non-primitive values,
  // this is a deep duplication. Nothing is removed from the stack.
  //
  // `i1`: Negative of stack index to duplicate.
  //
  // Stack signature: `[1]`
  //
  // Throws:
  // * `google.rpc.Code.INVALID_ARGUMENT` if the value cannot be duplicated.
  // * `google.rpc.Code.FAILED_PRECONDITION` if `i1` is an invalid stack index.
  OP_DUP = 6;

  // Pop `i1` values from the top of the stack, discarding them
  //
  // `i1`: Number of values to pop. If `0` is given, 1 value will still be
  // popped.
  //
  // Stack signature: `[-i1]`
  //
  // Throws:
  // * `google.rpc.Code.FAILED_PRECONDITION` if `depth < i1`
  OP_POP = 7;

  // Drop the element at position `-i1` from the stack.
  //
  // Stack signature: `[-1]`
  OP_DROP = 8;

  // Roll the top `i1` values on the stack. Effectively, moves the object
  // at `stack(-i1 + 1)` to the top of the stack.
  //
  // `i1`: Number of stack entries to roll.
  //
  // Stack signature: `[]`
  //
  // Throws:
  // * `google.rpc.Code.FAILED_PRECONDITION` if `depth < i1`
  OP_ROLL = 9;

  // Push `env[stack(0)]` to the stack. If the value doesn't exist in
  // the environment, `null` is pushed.
  //
  // Stack signature: `[-1, 1]`
  OP_GETVAR = 10;

  // Perform `env[stack(0)] = stack(-1)`.
  //
  // Stack signature: `[-2]`
  OP_SETVAR = 11;

  // Remove `env[stack(0)]` from the environment. If there is no such
  // environment variable, this is a no-op.
  //
  // Stack signature: `[-1]`
  OP_CLEARVAR = 12;

  // Determine if `env[stack(0)]` exists. Pushes boolean TRUE or FALSE.
  //
  // Stack signature: `[-1, 1]`
  OP_CHECKVAR = 13;

  // Computes the Boolean equivalent of the value atop the stack. If the result
  // is equivalent to `i1`,
  // the next instruction in the code segment is skipped. If the
  // result is not, the next instruction in the code segment is executed.
  // The next instruction is expected to be a JMP to an "else" branch.
  //
  // `i1`: If `i1 == 0`, the branch is taken if true. If `i1 != 0`, the branch
  // is taken if false.
  //
  // Stack signature: `[-1]`
  OP_TEST = 14;

  // Jump instruction. Moves the instruction pointer to another index within the
  // currently-executing code segment.
  //
  // `i1`: Position in function to jump to.
  OP_JMP = 15;

  // Push an environment onto the call stack.
  OP_ENVPUSH = 16;

  // Pop an environment off the call stack.
  OP_ENVPOP = 17;

  // Calls the function at `stack(0)` with `stack(-1)` arguments ranging
  // from `stack(-2)` to `stack(-2 - stack(-1) - 1)`. If the function
  // returns with success, leaves the return value on the stack.
  //
  // `i1`: If `i1 == 1`, this call is treated as a `try`. `result` and `error`
  // are pushed to the stack, with `error` being `null` if there was no error.
  // and `result` being `null` if an error was caught.
  //
  // Stack signature: `[-(stack(-1) + 2), (i1 == 1) ? 2 : 1]`
  OP_CALL = 18;

  // Return to the previous function in the call stack, with the instruction
  // pointer advanced past `OP_CALL`. The value of `stack(0)` will be returned
  // and pushed at the call site as a successful result.
  //
  // Stack signature: `[-1]`
  OP_RETURN = 19;

  // Throw an error. `stack(0)` must be a `google.rpc.Status`. The stack is
  // unwound until a frame with an error handler is reached, and control
  // is returned to that frame. 
  OP_THROW = 20;

  // Execute `OP(stack(0), stack(-1))`, pushing the result.
  //
  // Stack signature: `[-2, 1]`
  OP_BINOP = 21;

  // Execute `OP(stack(0))`, pushing the result.
  //
  // Stack signature: `[-1, 1]`
  OP_UNOP = 22;

  // Compute `stack(-1)[stack(0)]`, where `stack(-1)` must be an indexable
  // value (list, map, or object). If the index doesn't exist on the
  // value, `undefined` is pushed. If the value wasn't indexable, an
  // error is thrown.
  //
  // Stack signature: `[-2, 1]`
  OP_INDEX = 23;

  // Compute the length of `stack(0)`, where `stack(0)` is a list. If
  // `stack(0)` isn't a list, an error is thrown.
  OP_LLEN = 24;

  // Remove the first `stack(0)` elements from list `stack(-1)`, pushing
  // result as a new list. If the list has insufficient elements, an
  // empty list is pushed.
  OP_LREST = 25;

  // Given a number `n = stack(0)` of entries to exclude, and `stack(-1)`
  // through `stack(-n)` containing object key names corresponding to
  // those entries, remove each of those entries from the message or map
  // at `stack(-n-1)`, leaving a new map on the stack representing
  // the original object with those entries omitted.
  //
  // Stack signature: `[-n-2, 1]`
  OP_OREST = 26;

  // Truncate the stack to length `i1`, pushing `undefined` if the stack
  // is too short, and dropping elements starting with the topmost
  // if the stack is too tall.
  OP_NARGS = 27;

  // Truncate the stack to length `i1`, pushing `undefined` if the stack
  // is too short. If the stack is too long, topmost elements are gathered
  // into a list in reverse order, until enough elements are popped to
  // reach length `i1`. The list is then pushed, leaving `i1+1` elements
  // on the stack.
  OP_NARGSREST = 28;
}

// Binary operators
enum Binop {
  BINOP_ADD = 0;
  BINOP_SUB = 1;
  BINOP_MUL = 2;
  BINOP_DIV = 3;
  BINOP_MOD = 4;
  BINOP_POW = 5;
  BINOP_AND = 6;
  BINOP_OR = 7;
  BINOP_EQ = 8;
  BINOP_LT = 9;
  BINOP_LE = 10;
  BINOP_NULLISH_COALESCE = 11;
  BINOP_UNDEF_COALESCE = 12;
}

// Unary operators
enum Unop {
  UNOP_MINUS = 0;
  UNOP_NOT = 1;
}

// A single instruction in a WorkflowASM program.
message Instruction {
  // Opcode for the instruction
  Opcode opcode = 1;

  // Integer parameter 1. Interpretation of this parameter depends on the
  // opcode.
  int32 i1 = 2;
}
