// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file workflowasm/vm/v1/state.proto (package workflowasm.vm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Value } from "../../../cel/expr/value_pb.js";

/**
 * Serialized state of a Workflowasm VM.
 *
 * @generated from message workflowasm.vm.v1.State
 */
export class State extends Message<State> {
  /**
   * Call stack. The tail entry represents the top of the stack and therefore
   * the currently running function.
   *
   * @generated from field: repeated workflowasm.vm.v1.State.CallStackEntry call_stack = 1;
   */
  callStack: State_CallStackEntry[] = [];

  /**
   * Value stack. The tail entry represents the top of the stack.
   *
   * @generated from field: repeated workflowasm.vm.v1.State.ValueStackEntry value_stack = 2;
   */
  valueStack: State_ValueStackEntry[] = [];

  constructor(data?: PartialMessage<State>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "workflowasm.vm.v1.State";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "call_stack", kind: "message", T: State_CallStackEntry, repeated: true },
    { no: 2, name: "value_stack", kind: "message", T: State_ValueStackEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): State {
    return new State().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): State {
    return new State().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): State {
    return new State().fromJsonString(jsonString, options);
  }

  static equals(a: State | PlainMessage<State> | undefined, b: State | PlainMessage<State> | undefined): boolean {
    return proto3.util.equals(State, a, b);
  }
}

/**
 * Address of a distinct instruction within an assembly.
 *
 * @generated from message workflowasm.vm.v1.State.InstructionPointer
 */
export class State_InstructionPointer extends Message<State_InstructionPointer> {
  /**
   * The local name of the function segment this IP points to
   *
   * @generated from field: string function_segment = 1;
   */
  functionSegment = "";

  /**
   * Index into the function segment of the target instruction 
   *
   * @generated from field: int32 instruction_index = 2;
   */
  instructionIndex = 0;

  constructor(data?: PartialMessage<State_InstructionPointer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "workflowasm.vm.v1.State.InstructionPointer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "function_segment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instruction_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): State_InstructionPointer {
    return new State_InstructionPointer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): State_InstructionPointer {
    return new State_InstructionPointer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): State_InstructionPointer {
    return new State_InstructionPointer().fromJsonString(jsonString, options);
  }

  static equals(a: State_InstructionPointer | PlainMessage<State_InstructionPointer> | undefined, b: State_InstructionPointer | PlainMessage<State_InstructionPointer> | undefined): boolean {
    return proto3.util.equals(State_InstructionPointer, a, b);
  }
}

/**
 * Function call stack entry, including local variable state and return
 * address
 *
 * @generated from message workflowasm.vm.v1.State.CallStackEntry
 */
export class State_CallStackEntry extends Message<State_CallStackEntry> {
  /**
   * Variable values
   *
   * @generated from field: map<string, cel.expr.Value> vars = 1;
   */
  vars: { [key: string]: Value } = {};

  /**
   * Instruction pointer
   *
   * @generated from field: workflowasm.vm.v1.State.InstructionPointer instruction_pointer = 2;
   */
  instructionPointer?: State_InstructionPointer;

  constructor(data?: PartialMessage<State_CallStackEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "workflowasm.vm.v1.State.CallStackEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vars", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 2, name: "instruction_pointer", kind: "message", T: State_InstructionPointer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): State_CallStackEntry {
    return new State_CallStackEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): State_CallStackEntry {
    return new State_CallStackEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): State_CallStackEntry {
    return new State_CallStackEntry().fromJsonString(jsonString, options);
  }

  static equals(a: State_CallStackEntry | PlainMessage<State_CallStackEntry> | undefined, b: State_CallStackEntry | PlainMessage<State_CallStackEntry> | undefined): boolean {
    return proto3.util.equals(State_CallStackEntry, a, b);
  }
}

/**
 * Value stack entry
 *
 * @generated from message workflowasm.vm.v1.State.ValueStackEntry
 */
export class State_ValueStackEntry extends Message<State_ValueStackEntry> {
  /**
   * @generated from field: cel.expr.Value value = 1;
   */
  value?: Value;

  constructor(data?: PartialMessage<State_ValueStackEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "workflowasm.vm.v1.State.ValueStackEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): State_ValueStackEntry {
    return new State_ValueStackEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): State_ValueStackEntry {
    return new State_ValueStackEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): State_ValueStackEntry {
    return new State_ValueStackEntry().fromJsonString(jsonString, options);
  }

  static equals(a: State_ValueStackEntry | PlainMessage<State_ValueStackEntry> | undefined, b: State_ValueStackEntry | PlainMessage<State_ValueStackEntry> | undefined): boolean {
    return proto3.util.equals(State_ValueStackEntry, a, b);
  }
}

