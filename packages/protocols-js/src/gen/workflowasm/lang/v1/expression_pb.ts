// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file workflowasm/lang/v1/expression.proto (package workflowasm.lang.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ParsedExpr } from "../../../cel/expr/syntax_pb.js";
import { CheckedExpr } from "../../../cel/expr/checked_pb.js";

/**
 * An evaluable WorkflowASM expression
 *
 * @generated from message workflowasm.lang.v1.Expression
 */
export class Expression extends Message<Expression> {
  /**
   * Supported kinds of expressions
   *
   * @generated from oneof workflowasm.lang.v1.Expression.expression_kind
   */
  expressionKind: {
    /**
     * A CEL `ParsedExpr`
     *
     * @generated from field: cel.expr.ParsedExpr cel_parsed_expr = 1;
     */
    value: ParsedExpr;
    case: "celParsedExpr";
  } | {
    /**
     * A type-checked CEL `CheckedExpr`
     *
     * @generated from field: cel.expr.CheckedExpr cel_checked_expr = 2;
     */
    value: CheckedExpr;
    case: "celCheckedExpr";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Expression>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "workflowasm.lang.v1.Expression";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cel_parsed_expr", kind: "message", T: ParsedExpr, oneof: "expression_kind" },
    { no: 2, name: "cel_checked_expr", kind: "message", T: CheckedExpr, oneof: "expression_kind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Expression {
    return new Expression().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Expression {
    return new Expression().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Expression {
    return new Expression().fromJsonString(jsonString, options);
  }

  static equals(a: Expression | PlainMessage<Expression> | undefined, b: Expression | PlainMessage<Expression> | undefined): boolean {
    return proto3.util.equals(Expression, a, b);
  }
}

