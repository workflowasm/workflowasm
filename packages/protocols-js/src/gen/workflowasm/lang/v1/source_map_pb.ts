// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file workflowasm/lang/v1/source_map.proto (package workflowasm.lang.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Source mapping information associated with a 
 * compiled function, for debugging and inspection
 * purposes.
 *
 * @generated from message workflowasm.lang.v1.SourceMap
 */
export class SourceMap extends Message<SourceMap> {
  /**
   * THe file name this source map maps into. Must
   * correspond with the `filename` of the appropriate
   * `object_file`.
   *
   * @generated from field: string filename = 1;
   */
  filename = "";

  constructor(data?: PartialMessage<SourceMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "workflowasm.lang.v1.SourceMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourceMap {
    return new SourceMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourceMap {
    return new SourceMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourceMap {
    return new SourceMap().fromJsonString(jsonString, options);
  }

  static equals(a: SourceMap | PlainMessage<SourceMap> | undefined, b: SourceMap | PlainMessage<SourceMap> | undefined): boolean {
    return proto3.util.equals(SourceMap, a, b);
  }
}

