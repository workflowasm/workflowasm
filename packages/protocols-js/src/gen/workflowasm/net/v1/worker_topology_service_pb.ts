// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file workflowasm/net/v1/worker_topology_service.proto (package workflowasm.net.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message workflowasm.net.v1.RegisterWorkerRequest
 */
export class RegisterWorkerRequest extends Message<RegisterWorkerRequest> {
  /**
   * @generated from field: google.protobuf.Any typed_worker_info = 1;
   */
  typedWorkerInfo?: Any;

  constructor(data?: PartialMessage<RegisterWorkerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "workflowasm.net.v1.RegisterWorkerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "typed_worker_info", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterWorkerRequest {
    return new RegisterWorkerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterWorkerRequest {
    return new RegisterWorkerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterWorkerRequest {
    return new RegisterWorkerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterWorkerRequest | PlainMessage<RegisterWorkerRequest> | undefined, b: RegisterWorkerRequest | PlainMessage<RegisterWorkerRequest> | undefined): boolean {
    return proto3.util.equals(RegisterWorkerRequest, a, b);
  }
}

/**
 * @generated from message workflowasm.net.v1.RegisterWorkerResponse
 */
export class RegisterWorkerResponse extends Message<RegisterWorkerResponse> {
  /**
   * If worker registration is successful, this key must be used by the worker
   * when connecting via the orchestrator service.
   *
   * @generated from field: string worker_connection_key = 1;
   */
  workerConnectionKey = "";

  /**
   * Network host of the orchestrator the Worker should connect to.
   *
   * @generated from field: string orchestrator_host = 2;
   */
  orchestratorHost = "";

  /**
   * Port on the orchestrator_host to connect to. 
   *
   * @generated from field: string orchestrator_port = 3;
   */
  orchestratorPort = "";

  constructor(data?: PartialMessage<RegisterWorkerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "workflowasm.net.v1.RegisterWorkerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "worker_connection_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orchestrator_host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "orchestrator_port", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterWorkerResponse {
    return new RegisterWorkerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterWorkerResponse {
    return new RegisterWorkerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterWorkerResponse {
    return new RegisterWorkerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterWorkerResponse | PlainMessage<RegisterWorkerResponse> | undefined, b: RegisterWorkerResponse | PlainMessage<RegisterWorkerResponse> | undefined): boolean {
    return proto3.util.equals(RegisterWorkerResponse, a, b);
  }
}

/**
 * @generated from message workflowasm.net.v1.ReregisterWorkerRequest
 */
export class ReregisterWorkerRequest extends Message<ReregisterWorkerRequest> {
  /**
   * * 
   * The original `worker_connection_key` from the initial 
   * `RegisterWorkerResponse` received by this worker.
   *
   * @generated from field: string worker_connection_key = 1;
   */
  workerConnectionKey = "";

  constructor(data?: PartialMessage<ReregisterWorkerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "workflowasm.net.v1.ReregisterWorkerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "worker_connection_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReregisterWorkerRequest {
    return new ReregisterWorkerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReregisterWorkerRequest {
    return new ReregisterWorkerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReregisterWorkerRequest {
    return new ReregisterWorkerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReregisterWorkerRequest | PlainMessage<ReregisterWorkerRequest> | undefined, b: ReregisterWorkerRequest | PlainMessage<ReregisterWorkerRequest> | undefined): boolean {
    return proto3.util.equals(ReregisterWorkerRequest, a, b);
  }
}

/**
 * @generated from message workflowasm.net.v1.ReregisterWorkerResponse
 */
export class ReregisterWorkerResponse extends Message<ReregisterWorkerResponse> {
  constructor(data?: PartialMessage<ReregisterWorkerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "workflowasm.net.v1.ReregisterWorkerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReregisterWorkerResponse {
    return new ReregisterWorkerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReregisterWorkerResponse {
    return new ReregisterWorkerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReregisterWorkerResponse {
    return new ReregisterWorkerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReregisterWorkerResponse | PlainMessage<ReregisterWorkerResponse> | undefined, b: ReregisterWorkerResponse | PlainMessage<ReregisterWorkerResponse> | undefined): boolean {
    return proto3.util.equals(ReregisterWorkerResponse, a, b);
  }
}

